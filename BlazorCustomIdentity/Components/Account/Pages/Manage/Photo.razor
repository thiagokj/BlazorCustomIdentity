@page "/Account/Manage/Photo"
@rendermode InteractiveServer

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Identity
@using BlazorCustomIdentity.Data
@using BlazorCustomIdentity.Extensions

@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UserManager<ApplicationUser> UserManager
@inject NavigationManager NavigationManager

<style>
    .custom-input-file {
        display: none;
    }

    .custom-file-upload {
        margin: 6px 0px;
        cursor: pointer;
        background: #b3b6b3;
        color: white;
        border: none;
        border-radius: 4px;
        text-align: center;
    }

    .custom-file-upload:hover {
        background: #707571;
    }
</style>

<h3>Photo</h3>

<div class="row">
    <div class="col-md-6">
        @if (image != null)
        {
            <div class="form-group">
                <img src="data:@image.ContentType;base64,@image.Base64data" />
            </div>
        }

        <div class="form-group">
            <label for="inputFile" class="w-50 btn btn-lg custom-file-upload">
                <i class="bi bi-cloud-arrow-up-fill"></i> Carregar
            </label>

            <InputFile class="custom-input-file" OnChange="OnChange" accept="image/png, image/jpeg, image/gif"
                id="inputFile" />
        </div>

        <button type="submit" @onclick="OnClickUploadAsync" class="w-50 btn btn-lg btn-primary">Salvar</button>
    </div>
</div>

@code {
    private ImageFile? image;

    private ApplicationUser user = default!;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var authUser = authState.User;

        if (authUser.Identity.IsAuthenticated)
            user = await UserManager.GetUserAsync(authUser);

        if (user != null)
            if (!string.IsNullOrWhiteSpace(user.ProfilePictureBase64))
                image = new ImageFile
                    {
                        Base64data = user.ProfilePictureBase64,
                        ContentType = "PNG",
                        FileName = "ProfilePicture"
                    };
    }

    async Task OnChange(InputFileChangeEventArgs e)
    {
        var file = e.File;
        var resizedFile = await file.RequestImageFileAsync(file.ContentType, 128, 128);

        var buf = new byte[resizedFile.Size];
        using (var stream = resizedFile.OpenReadStream())
        {
            await stream.ReadAsync(buf, 0, buf.Length);
        }

        image = new ImageFile
            {
                Base64data = Convert.ToBase64String(buf),
                ContentType = file.ContentType,
                FileName = file.Name
            };
    }

    async Task OnClickUploadAsync()
    {
        var setUserDataResult = await UserManager.SetUserPhotoAsync(user, image.Base64data);

        if (!setUserDataResult.Succeeded)
            NavigationManager.NavigateTo("/Account/Manage", true);

        NavigationManager.NavigateTo("/Account/Manage", true);
    }

    public class ImageFile
    {
        public string? Base64data { get; set; }
        public string? ContentType { get; set; }
        public string? FileName { get; set; }
    }

}
